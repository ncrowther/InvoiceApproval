ã;// Description
//	Process invoice
// Input Variables
//	in_invoice			- The invoice to process (pdf file)
//
// Output Variables
// 	out_invoiceNumber		- The extracted invoice number
// 	out_invoiceDate			- The invoice date
// 	out_amountNumber		- The invoice total amount
// 	out_vatNumber			- The invoice VAT amount
// 	out_vatNumber			- The invoice VAT amount
// 	out_success			- Boolean value indicating success or failure
// 	out_code				- 00 if success, any other number represents an error code
// 	out_desc				- Description of error code. For example "Failed to parse VAT
//
// Author:	Nigel T. Crowther
// Date: 		26-Oct-2022
// Copyright IBM Corporation 2022. All rights reserved
//
defVar --name in_invoice --type String --value "D:/A_Consultancy/Presales/2022/Midcounties/Git/MidcountiesExpenseBot/invoiceSamples/B&Q/269111_1291879544_Enhanced.pdf" --parameter  --required 
defVar --name out_invoiceNumber --type String --output 
defVar --name out_invoiceDate --type String --output 
defVar --name out_amountNumber --type Numeric --value 0 --output 
defVar --name out_vatNumber --type Numeric --value 0 --output 
defVar --name out_success --type Boolean --value True --output 
defVar --name out_code --type String --value 0 --output 
defVar --name out_desc --type String --value SUCCESS --output 
defVar --name amountText --type String
defVar --name pdf --type Pdf
defVar --name fieldName --type String
defVar --name image --type Image
defVar --name pdf1 --type Pdf
defVar --name pdf2 --type Pdf

onError --executenext 

goSub --label processInvoice

beginSub --name processInvoice
pdfOpen --file "${in_invoice}" out_success=success pdf=value
if --left "${out_success}" --operator "Is_True" --negate 
	setVar --name "${out_success}" --value false
	setVar --name "${out_code}" --value 99
	setVar --name "${out_desc}" --value "Failed to read PDF ${in_invoice}"
	logMessage --message " ${out_desc}" --type "Error"
	return
endIf

// Extract Total Amount
//extractPdfText --page 1 --language "en-US" --searchregion "644,1049,181,26" --anchor Total --anchorprovider "Google" --comparison "Equal_To" --segmentation "Word" --targetregion "83,-6,48,22" --targetprovider "Abbyy" --file ${pdf} out_success=success amountText=text
extractPdfText --page 1 --language "en-US" --searchregion "642,1103,202,22" --anchor Total --anchorprovider "Abbyy" --comparison "Equal_To" --segmentation "Word" --targetregion "100,-4,62,20" --targetprovider "Abbyy" --file ${pdf} out_success=success image=image amountText=text
//extractPdfText --page 1 --language "en-US" --searchregion "644,1053,191,20" --anchor Total --anchorprovider "Google" --comparison "ApproximatelyEquals" --fuzzyalgorithm "LevenshteinDistance" --tolerance "Normal" --segmentation "Word" --anchorhighcontrast  --targetregion "84,-3,49,18" --targetprovider "Abbyy" --targethighcontrast  --file ${pdf} out_success=success amountText=text

if --left "${out_success}" --operator "Is_True" --negate 
	setVar --name "${out_success}" --value false
	setVar --name "${out_code}" --value 99
	setVar --name "${out_desc}" --value "Failed to read total amount"
	logMessage --message " ${out_desc}" --type "Error"
	return
endIf

replaceText --texttoparse "${amountText}" --textpattern " " --replacement "." amountText=value
setVar --name "${fieldName}" --value amount
executeScript --name convertToDecimal --parameters "in_out_amountText=${amountText},in_fieldName=${fieldName}" --output "in_out_amountText=${amountText}" out_success=value
onError --label ParsingErrorHandler
convertStringToNumber --culture "en-US" --text "${amountText}" --allowdecimalpoint  --allowthousands  out_amountNumber=value
if --left "${out_success}" --operator "Is_True" --negate 
	// Return from parsing exception
	return
endIf

// Extract Vat
extractPdfText --page 1 --language "en-US" --searchregion "630,1048,236,95" --anchor VAT --anchorprovider "Google" --comparison "Equal_To" --segmentation "Word" --targetregion "106,-5,56,23" --targetprovider "Abbyy" --targethighcontrast  --file ${pdf} out_success=success amountText=text
//extractPdfText --page 1 --language "en-US" --searchregion "634,1046,221,86" --anchor VAT --anchorprovider "Google" --comparison "Equal_To" --segmentation "Word" --targetregion "105,-5,54,24" --targetprovider "Abbyy" --file ${pdf} out_success=success amountText=text
if --left "${out_success}" --operator "Is_True" --negate 
	setVar --name "${out_success}" --value false
	setVar --name "${out_code}" --value 99
	setVar --name "${out_desc}" --value "Failed to read vat amount"
	logMessage --message " ${out_desc}" --type "Error"
	return
endIf

setVar --name "${fieldName}" --value vat
executeScript --name convertToDecimal --parameters "in_out_amountText=${amountText},in_fieldName=${fieldName}" --output "in_out_amountText=${amountText}"
onError --label ParsingErrorHandler
convertStringToNumber --culture "en-US" --text "${amountText}" --allowdecimalpoint  --allowthousands  out_vatNumber=value
if --left "${out_success}" --operator "Is_True" --negate 
	// Return from parsing exception
	logMessage --message "Error: ${amountText}" --type "Info"
	return
endIf

// Extract invoice number
extractPdfText --page 1 --language "en-US" --searchregion "100,185,273,19" --anchor Invoice --anchorprovider "Google" --comparison "Equal_To" --segmentation "Word" --targetregion "165,-6,81,19" --targetprovider "Abbyy" --file ${pdf} out_success=success out_invoiceNumber=text
logMessage --message "Invoice Number: ${out_invoiceNumber}" --type "Info"

//extractPdfText --page 1 --language "en-US" --searchregion "68,106,467,171" --anchor Invoice --anchorprovider "Google" --comparison "Equal_To" --segmentation "Word" --targetregion "169,0,77,20" --targetprovider "Abbyy" --targethighcontrast  --file ${pdf} out_success=success out_invoiceNumber=text
if --left "${out_success}" --operator "Is_True" --negate 
	setVar --name "${out_success}" --value false
	setVar --name "${out_code}" --value 99
	setVar --name "${out_desc}" --value "Failed to read invoice number"
	logMessage --message " ${out_desc}" --type "Error"
	return
endIf
trimString --text "${out_invoiceNumber}" --trimoption "TrimStartAndEnd" out_invoiceNumber=value
replaceText --texttoparse "${out_invoiceNumber}" --textpattern " " --comment "remove spaces" out_invoiceNumber=value
replaceText --texttoparse "${out_invoiceNumber}" --useregex  --pattern "\\n" --regexOptions "0" out_invoiceNumber=value

// Extract invoice date
extractPdfText --page 1 --language "en-US" --searchregion "95,1125,775,81" --anchor due --anchorprovider "Google" --comparison "Equal_To" --segmentation "Word" --targetregion "138,-5,87,25" --targetprovider "Abbyy" --file ${pdf} out_success=success out_invoiceDate=text
if --left "${out_success}" --operator "Is_True" --negate 
	setVar --name "${out_success}" --value false
	setVar --name "${out_code}" --value 99
	setVar --name "${out_desc}" --value "Failed to read invoice date"
	logMessage --message " ${out_desc}" --type "Error"
	return
endIf
replaceText --texttoparse "${out_invoiceDate}" --useregex  --pattern "\\n" --regexOptions "0" out_invoiceDate=value

logMessage --message "Invoice Number: ${out_invoiceNumber} \r\nInvoice Date: ${out_invoiceDate}\r\nInvoice Amount: ${out_amountNumber}" --type "Info"

endSub

beginSub --name ParsingErrorHandler
setVar --name "${out_success}" --value false
setVar --name "${out_code}" --value 99
setVar --name "${out_desc}" --value "Failed to parse ${fieldName} in ${in_invoice}"
logMessage --message " ${out_desc}" --type "Error"
recover
endSub*21.0.6.0