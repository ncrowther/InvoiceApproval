ÀH// Description
//	Process invoice
// Input Variables
//	in_invoice			- The invoice to process (pdf file)
//
// Output Variables
// 	out_invoiceNumber		- The extracted invoice number
// 	out_invoiceDate			- The invoice date
// 	out_amountNumber		- The invoice total amount
// 	out_vatNumber			- The invoice VAT amount
// 	out_vatNumber			- The invoice VAT amount
// 	out_success			- Boolean value indicating success or failure
// 	out_code				- 00 if success, any other number represents an error code
// 	out_desc				- Description of error code. For example "Failed to parse VAT
//
// Author:	Nigel T. Crowther
// Date: 		26-Oct-2022
// Copyright IBM Corporation 2022. All rights reserved
//
defVar --name in_invoice --type String --value "D:\\RPA\\github\\invoiceProcessingPAM_DM_RPA\\InvoiceApproval\\InvoiceProcessing-RPA\\testInvoices\\Momentum\\30503203 Abakus.pdf" --parameter  --required 
defVar --name in_invoiceExcelFileName --type String --value "D:\\RPA\\github\\invoiceProcessingPAM_DM_RPA\\InvoiceApproval\\InvoiceProcessing-RPA\\bot\\invoiceReaders\\Abakus.xlsx" --parameter  --required 
defVar --name out_invoiceNumber --type String --output 
defVar --name out_invoiceDate --type String --output 
defVar --name out_amountNumber --type Numeric --value 0 --output 
defVar --name out_vatNumber --type Numeric --value 0 --output 
defVar --name out_success --type Boolean --value True --output 
defVar --name out_code --type String --value 0 --output 
defVar --name out_desc --type String --value SUCCESS --output 
defVar --name amountText --type String
defVar --name pdf --type Pdf
defVar --name fieldName --type String
defVar --name invoiceDateTime --type DateTime
defVar --name extractedImage --type Image
defVar --name customFormat --type String --value "dd/MM/yyyy"
defVar --name reason --type String
defVar --name excelFileInstance --type Excel
defVar --name invoiceDataTable --type DataTable
defVar --name rowCount --type Numeric
defVar --name tableColumnIndex --type Numeric
defVar --name tableRowIndex --type Numeric --value 3
defVar --name productCode --type String --value UNDEFINED
defVar --name productYCoord --type Numeric
defVar --name productCellCoord --type Rectangle
defVar --name vat --type String --value UNDEFINED
defVar --name vatYCoord --type Numeric
defVar --name vatCellCoord --type Rectangle
defVar --name qty --type String
defVar --name yCoord --type Numeric
defVar --name qtyCellCoord --type Rectangle
defVar --name units --type String
defVar --name unitsCellCoord --type Rectangle
defVar --name netPrice --type String
defVar --name netPriceCellCoord --type Rectangle
defVar --name totalPrice --type String
defVar --name totalPriceCellCoord --type Rectangle
defVar --name description --type String
defVar --name descriptionCellCoord --type Rectangle
defVar --name expectedPrice --type Numeric
defVar --name anchorImage --type Image
defVar --name pdf1 --type Pdf
defVar --name pdf2 --type Pdf
defVar --name pdf3 --type Pdf
defVar --name pdf4 --type Pdf
defVar --name pdf5 --type Pdf


onError --label ParsingErrorHandler

goSub --label processInvoice

beginSub --name processInvoice
pdfOpen --file "${in_invoice}" out_success=success pdf=value
if --left "${out_success}" --operator "Is_True" --negate 
	setVar --name "${out_success}" --value false
	setVar --name "${out_code}" --value 99
	setVar --name "${out_desc}" --value "Failed to read PDF ${in_invoice}"
	logMessage --message " ${out_desc}" --type "Error"
	return
endIf

goSub --label openExcel


// Extract invoice number (PO)
pdfRegionText --language "en-US" --region "188,148,68,18" --page 1 --dpix 110 --dpiy 110 --file ${pdf} out_invoiceNumber=value

// Extract invoice date
pdfRegionText --language "en-US" --region "190,126,73,21" --page 1 --dpix 110 --dpiy 110 --file ${pdf} out_invoiceDate=value

goSub --label writeInvoiceData

goSub --label getLineItems

goSub --label closeExcel


endSub

beginSub --name getLineItems
//setVar --name "${yCoord}" --value 57

//while --left "${productCode}" --operator "Is_Null" --negate

// Product code
//setVar --name "${productCellCoord}" --value "-7,${yCoord},105,20"
extractPdfText --page 1 --language "en-US" --searchregion "57,168,67,32" --anchor ITEM --anchorprovider "Google" --comparison "Equal_To" --segmentation "Word" --targetregion "-14,32,62,19" --targetprovider "Google" --file ${pdf} anchorImage=anchor out_success=success extractedImage=image productCode=text

//extractPdfText --page 1 --language "en-US" --searchregion "37,435,116,545" --anchor PRODUCT --anchorprovider "Google" --comparison "Equal_To" --segmentation "Word" --targetregion "${productCellCoord}" --targetprovider "Google" --file ${pdf} out_success=success extractedImage=image productCode=text
replaceText --texttoparse "${productCode}" --textpattern " " productCode=value

// Description
//setVar --name "${descriptionCellCoord}" --value "110,${yCoord},322,23"
extractPdfText --page 1 --language "en-US" --searchregion "57,168,67,32" --anchor ITEM --anchorprovider "Google" --comparison "Equal_To" --segmentation "Word" --targetregion "51,29,215,23" --targetprovider "Google" --file ${pdf} anchorImage=anchor out_success=success extractedImage=image description=text

//extractPdfText --page 1 --language "en-US" --searchregion "40,435,824,669" --anchor PRODUCT --anchorprovider "Google" --comparison "Equal_To" --segmentation "Word" --targetregion "${descriptionCellCoord}" --targetprovider "Google" --file ${pdf} out_success=success extractedImage=image description=text

// Qty
//setVar --name "${qtyCellCoord}" --value "1,${yCoord},25,18"
extractPdfText --page 1 --language "en-US" --searchregion "57,168,67,32" --anchor ITEM --anchorprovider "Google" --comparison "Equal_To" --segmentation "Word" --targetregion "492,29,51,23" --targetprovider "Google" --file ${pdf} anchorImage=anchor out_success=success anchorImage=image qty=text

//extractPdfText --page 1 --language "en-US" --searchregion "480,434,36,48" --anchor QTY --anchorprovider "Google" --comparison "Equal_To" --segmentation "Word" --targetregion "${qtyCellCoord}" --targetprovider "Abbyy" --file ${pdf} anchorImage=anchor out_success=success extractedImage=image qty=text
executeScript --name convertToDecimal --parameters "in_out_amountText=${qty},in_fieldName=qty" --output "in_out_amountText=${qty}" out_success=value

goSub --label writeLineItem

//evaluate --expression "${yCoord} + 26" yCoord=value

//endWhile


endSub

beginSub --name openExcel

excelOpen --file "${in_invoiceExcelFileName}" --savechanges  out_success=success reason=reason excelFileInstance=value
if --left "${out_success}" --operator "Is_True" --negate 
	logMessage --message "Error opening Excel: ${out_success}" --type "Error"
	stopExecution
endIf
excelGetTable --file ${excelFileInstance} --getfirstsheet  --entiretable  --hasheaders  invoiceDataTable=value rowCount=rows

endSub

beginSub --name closeExcel
excelClose --file ${excelFileInstance} --save 
endSub

beginSub --name writeInvoiceData
setVar --name "${tableColumnIndex}" --value 1

excelSet --value "${out_invoiceNumber}" --file ${excelFileInstance} --getfirstsheet  --row ${tableRowIndex} --column ${tableColumnIndex} --comment "Set line item description"
evaluate --expression "${tableColumnIndex}+1" tableColumnIndex=value

excelSet --value "${out_invoiceDate}" --file ${excelFileInstance} --getfirstsheet  --row ${tableRowIndex} --column ${tableColumnIndex} --comment "Set line item quantity"
evaluate --expression "${tableColumnIndex}+1" tableColumnIndex=value

evaluate --expression "${tableRowIndex}+2" tableRowIndex=value

endSub

beginSub --name writeLineItem
setVar --name "${tableColumnIndex}" --value 1
evaluate --expression "${tableRowIndex}+1" tableRowIndex=value
excelSet --value "${productCode}" --file ${excelFileInstance} --getfirstsheet  --row ${tableRowIndex} --column ${tableColumnIndex} --comment "Set line item product code"
evaluate --expression "${tableColumnIndex}+1" tableColumnIndex=value
excelSet --value "${description}" --file ${excelFileInstance} --getfirstsheet  --row ${tableRowIndex} --column ${tableColumnIndex} --comment "Set line item description"
evaluate --expression "${tableColumnIndex}+1" tableColumnIndex=value
excelSet --value "${qty}" --file ${excelFileInstance} --getfirstsheet  --row ${tableRowIndex} --column ${tableColumnIndex} --comment "Set line item quantity"
evaluate --expression "${tableColumnIndex}+1" tableColumnIndex=value
excelSet --value "${netPrice}" --file ${excelFileInstance} --getfirstsheet  --row ${tableRowIndex} --column ${tableColumnIndex} --comment "SetLine item net price"
evaluate --expression "${tableColumnIndex}+1" tableColumnIndex=value
excelSet --value "${totalPrice}" --file ${excelFileInstance} --getfirstsheet  --row ${tableRowIndex} --column ${tableColumnIndex} --comment "Set line item total price"

endSub


beginSub --name ParsingErrorHandler
setVar --name "${out_success}" --value false
setVar --name "${out_code}" --value 99
setVar --name "${out_desc}" --value "Failed to parse ${fieldName} in ${in_invoice}"
logMessage --message " ${out_desc}" --type "Error"
recover
endSub
*23.0.0.0