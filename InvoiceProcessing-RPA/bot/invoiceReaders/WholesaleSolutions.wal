‡%defVar --name in_invoice --type String --parameter  --required
defVar --name out_invoiceNumber --type String --output
defVar --name out_invoiceDate --type String --output
defVar --name out_amountNumber --type Numeric --value 0 --output
defVar --name out_vatNumber --type Numeric --value 0 --output
defVar --name out_success --type Boolean --value True --output
defVar --name out_code --type String --value 0 --output
defVar --name out_desc --type String --value SUCCESS --output
defVar --name amountText --type String
defVar --name pdf --type Pdf
defVar --name vatText --type String
defVar --name fieldName --type String

onError --executenext

goSub --label processInvoice

beginSub --name processInvoice
	pdfOpen --file "${in_invoice}" pdf=value
	
// Extract Total Amount
	extractPdfText --page 1 --language "en-US" --searchregion "4,963,902,142" --anchor Due --anchorprovider "Google" --comparison "Equal_To" --segmentation "Word" --targetregion "61,-3,75,17" --targetprovider "Google" --file ${pdf} out_success=success amountText=text
	if --left "${out_success}" --operator "Is_True" --negate
		setVar --name "${out_success}" --value false
		setVar --name "${out_code}" --value 99
		setVar --name "${out_desc}" --value "Failed to read total amount"
		logMessage --message " ${out_desc}" --type "Error"
		return
	endIf
	
	setVar --name "${fieldName}" --value amount
	onError --label ParsingErrorHandler
	trimString --text "${amountText}" --trimoption "TrimStartAndEnd" amountText=value
	replaceText --texttoparse "${amountText}" --textpattern "Â£" amountText=value
	convertStringToNumber --culture "en-US" --text "${amountText}" --allowdecimalpoint  --allowthousands  out_amountNumber=value
	
// Extract Vat
	extractPdfText --page 1 --language "en-US" --searchregion "567,790,313,53" --anchor VAT --anchorprovider "Google" --comparison "Equal_To" --segmentation "Word" --targetregion "113,-8,105,27" --targetprovider "Google" --file ${pdf} out_success=success vatText=text
	if --left "${out_success}" --operator "Is_True" --negate
		setVar --name "${out_success}" --value false
		setVar --name "${out_code}" --value 99
		setVar --name "${out_desc}" --value "Failed to read vat amount"
		logMessage --message " ${out_desc}" --type "Error"
		return
	endIf
	
	setVar --name "${fieldName}" --value vat
	onError --label ParsingErrorHandler
	trimString --text "${vatText}" --trimoption "TrimStartAndEnd" vatText=value
	replaceText --texttoparse "${vatText}" --textpattern "Â£" vatText=value
	convertStringToNumber --culture "en-US" --text "${vatText}" --allowdecimalpoint  --allowthousands  out_vatNumber=value
	
// Extract invoice number
	extractPdfText --page 1 --language "en-US" --searchregion "10,11,850,187" --anchor "no." --anchorprovider "Google" --comparison "Equal_To" --segmentation "Word" --targetregion "-63,14,64,17" --targetprovider "Google" --file ${pdf} out_success=success out_invoiceNumber=text
	if --left "${out_success}" --operator "Is_True" --negate
		setVar --name "${out_success}" --value false
		setVar --name "${out_code}" --value 99
		setVar --name "${out_desc}" --value "Failed to read invoice number"
		logMessage --message " ${out_desc}" --type "Error"
		return
	endIf
	trimString --text "${out_invoiceNumber}" --trimoption "TrimStartAndEnd" out_invoiceNumber=value
	replaceText --texttoparse "${out_invoiceNumber}" --textpattern " " --comment "remove spaces" out_invoiceNumber=value
	replaceText --texttoparse "${out_invoiceNumber}" --useregex  --pattern "\\n" --regexOptions "0" out_invoiceNumber=value
	
// Extract invoice date
	extractPdfText --page 1 --language "en-US" --searchregion "10,11,850,187" --anchor date --anchorprovider "Google" --comparison "Equal_To" --segmentation "Word" --targetregion "-62,16,75,23" --targetprovider "Google" --file ${pdf} out_success=success out_invoiceDate=text
	if --left "${out_success}" --operator "Is_True" --negate
		setVar --name "${out_success}" --value false
		setVar --name "${out_code}" --value 99
		setVar --name "${out_desc}" --value "Failed to read invoice date"
		logMessage --message " ${out_desc}" --type "Error"
		return
	endIf
	replaceText --texttoparse "${out_invoiceDate}" --useregex  --pattern "\\n" --regexOptions "0" out_invoiceDate=value
	
	logMessage --message "Invoice Number: ${out_invoiceNumber} \r\nInvoice Date: ${out_invoiceDate}\r\nInvoice Amount: ${out_amountNumber}" --type "Info"
	
endSub

beginSub --name ParsingErrorHandler
	setVar --name "${out_success}" --value false
	setVar --name "${out_code}" --value 99
	setVar --name "${out_desc}" --value "Failed to parse ${fieldName} in ${in_invoice}"
	logMessage --message " ${out_desc}" --type "Error"
endSub*21.0.5.0